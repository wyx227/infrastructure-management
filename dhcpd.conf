# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
option domain-name "kasumi321.net";
option domain-name-servers 10.200.10.1, 8.8.8.8;

default-lease-time 3600;
max-lease-time 7200;

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

subnet 10.200.10.0 netmask 255.255.255.0 {
  range 10.200.10.100 10.200.10.200;
  option routers 10.200.10.1;
}

subnet 10.200.100.0 netmask 255.255.255.0 {
  range 10.200.100.100 10.200.100.200;
  option routers 10.200.100.1;
}  

subnet 10.200.20.0 netmask 255.255.255.0 {
  range 10.200.20.100 10.200.20.200;
  option routers 10.200.20.1;
}

#subnet 172.22.138.160 netmask 255.255.255.224 {
#  range 172.22.138.180 172.22.138.190;
#  option routers 182.122.138.161;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

host esxi{
  hardware ethernet 98:fa:9b:63:ba:9f;
  fixed-address 10.200.10.2;
}


#host freebsd{
#  hardware ethernet 00:0c:29:29:0d:bb;
#  fixed-address 10.200.10.30;
#}

host windows{
  hardware ethernet 00:0c:29:5d:c7:c4;
  fixed-address 10.200.10.31;
}

host docker{
  hardware ethernet 00:60:2F:36:93:71;
  fixed-address 10.200.10.32;
}

host nas{
  hardware ethernet 8c:dc:d4:43:9f:cf;
  fixed-address 10.200.10.3;
}

host TL-SG1024DE{
  hardware ethernet 14:eb:b6:b3:24:5a;
  fixed-address 10.200.10.10;
}

host TL-SG108E{
  hardware ethernet 5c:a6:e6:e3:49:15; 
  fixed-address 10.200.10.11;
}

host k8s-master{
  hardware ethernet 00:60:2F:C3:C7:FE;
  fixed-address 10.200.10.20;
}

host k8s-node-1{
  hardware ethernet 00:60:2F:50:C9:11;
  fixed-address 10.200.10.21;
}


host raspberrypi{
  hardware ethernet dc:a6:32:13:59:64;
  fixed-address 10.200.10.14;
}
# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.example.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}


#.40 -> Laptop, Desktop
#.50 -> Phone, Tablet
host desktop{
  hardware ethernet c8:7f:54:c6:33:a1;
  fixed-address 10.200.10.40;
}

host macbook{
  hardware ethernet 70:ae:d5:2e:6c:1c;
  fixed-address 10.200.10.41;
}

host tp{
  hardware ethernet dc:97:ba:3d:24:6c;
  fixed-address 10.200.10.42;
}

host work{
  hardware ethernet e0:2b:e9:b9:ec:59;
  fixed-address 10.200.10.43;
}

host iphone{
  hardware ethernet 7c:ec:b1:25:3a:ab;
  fixed-address 10.200.10.50;
}

host tablet{
  hardware ethernet a8:30:bc:8a:5b:0d;
  fixed-address 10.200.10.51;
}

host docker-playground{
  hardware ethernet 00:60:2F:46:E1:E2;
  fixed-address 10.200.10.25; 
}


host panasonic-tab{
  hardware ethernet 84:fd:d1:bb:fe:d6;
  fixed-address 10.200.10.52; 
}

host haos{
  hardware ethernet 02:77:6E:C9:52:B7;
  fixed-address 10.200.10.28; 
}
host iot-router{
  hardware ethernet 94:83:c4:20:05:8f;
  fixed-address 10.200.10.12; 
}
host esp8266-kitchen{
  hardware ethernet 2c:f4:32:8c:9d:15;
  fixed-address 10.200.10.80; 
}
host esp32-wohnzimmer{
  hardware ethernet ac:67:b2:36:0b:28;
  fixed-address 10.200.10.81; 
}

host licheerv{
  hardware ethernet 94:a4:08:cd:88:2e;
  fixed-address 10.200.10.90; 
}
host rpi-work{
  hardware ethernet b8:27:eb:39:c7:71;
  fixed-address 10.200.10.82; 
}

host esxi-2{
  hardware ethernet 6c:4b:90:66:28:1d;
  fixed-address 10.200.10.13; 
}
host kasumi-ushio{
  hardware ethernet 00:50:56:24:05:09;
  fixed-address 10.200.10.91;
}
#test
#host test{\n  hardware ethernet 00:60:2F:B4:CA:C5;\n  fixed-address 10.200.10.111; \n}
#host test{
#  hardware ethernet 00:60:2F:11:2A:0F;
#  fixed-address 10.200.10.111; 
#}
host panel{
  hardware ethernet 00:60:2F:4C:5E:3D;
  fixed-address 10.200.10.22; 
}
host EVE{
  hardware ethernet 00:60:2F:73:1E:5D;
  fixed-address 10.200.10.5; 
}
host freebsd{
  hardware ethernet 00:60:2F:D4:8B:09;
  fixed-address 10.200.10.23; 
}
host lab-pc{
  hardware ethernet 00:50:56:86:1b:7a;
  fixed-address 10.200.10.24; 
}
host Retro-2K-SRV{
  hardware ethernet 00:50:56:86:d1:33;
  fixed-address 10.200.20.2; 
}
host Retro-2K-PRO{
  hardware ethernet 00:50:56:86:ab:2b;
  fixed-address 10.200.20.10; 
}
host Retro-WIN-XP{
  hardware ethernet 00:60:2F:98:D8:37;
  fixed-address 10.200.20.11; 
}
host MITRAC-PC{
  hardware ethernet 00:60:2F:39:4B:97;
  fixed-address 10.200.10.26; 
}
host WIN10-RA{
  hardware ethernet 00:60:2F:9E:42:F5;
  fixed-address 10.200.10.27; 
}
#host test{
#  hardware ethernet 00:60:2F:D6:2E:32;
#  fixed-address 10.200.10.99;
#}
